/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2008-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenLocal()
    }

    dependencies {
        classpath "org.codehaus.griffon:griffon-gradle-plugin:$griffonVersion"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'org.ajoberstar:gradle-git:1.3.2'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.2'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
        classpath 'net.nemerosa:versioning:2.7.1'
    }
}

apply plugin: 'base'
apply plugin: 'idea'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'net.nemerosa.versioning'
apply plugin: 'build-dashboard'
apply from: 'gradle/idea.gradle'
apply from: 'gradle/bom.gradle'
apply plugin: 'org.ajoberstar.github-pages'

Date buildTimeAndDate = new Date()
ext {
    buildBy = System.properties['user.name']
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    buildRevision = versioning.info.commit
    buildCreatedBy = "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString()
}

allprojects {
    apply plugin: 'base'
    apply plugin: 'idea'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = jacocoVersion
}

ext.jacocoProjects = []

subprojects { subproj ->
    plugins.withType(JavaPlugin) {
        subproj.tasks.withType(JavaCompile) {
            sourceCompatibility = subproj.sourceCompatibility
            targetCompatibility = subproj.targetCompatibility
        }

        subproj.tasks.withType(GroovyCompile) {
            sourceCompatibility = subproj.sourceCompatibility
            targetCompatibility = subproj.targetCompatibility
        }

        javadoc {
            classpath += [configurations.compileOnly]
        }

        dependencies {
            testCompile "junit:junit:\$junitVersion"
            testCompile "org.spockframework:spock-core:\${spockVersion}"
            testCompile "org.slf4j:slf4j-simple:\$slf4jVersion"
        }

        task sourceJar(type: Jar) {
            group 'Build'
            description 'An archive of the source code'
            classifier 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            group 'Build'
            description 'An archive of the Javadocs'
            classifier 'javadoc'
            from javadoc.destinationDir
        }

        tasks.withType(AbstractCompile) {
            if (rootProject.hasProperty('lint') && rootProject.lint.toBoolean()) {
                options.compilerArgs = [
                    '-Xlint:all', '-Xlint:deprecation', '-Xlint:unchecked'
                ]
            }
        }

        subproj.apply from: rootProject.file('gradle/publishing.gradle')
        subproj.apply from: rootProject.file('gradle/code-quality.gradle')

        if (subproj.publishJars.toBoolean()) {
            subproj.apply from: rootProject.file('gradle/docs.gradle')
        }
    }
}

evaluationDependsOnChildren()

if (!project.hasProperty('githubUsername')) ext.githubUsername = ''
if (!project.hasProperty('githubPassword')) ext.githubPassword = ''

githubPages {
    repoUri = project.projectVcsUrl
    pages {
        from project(":${pluginBaseName}-guide").guide.outputs.files
    }

    credentials {
        username = githubUsername
        password = githubPassword
    }
}

publishGhPages.dependsOn(project(":${pluginBaseName}-guide").guide)

coveralls {
    sourceDirs = files(jacocoProjects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = jacocoProjects.test
    additionalSourceDirs = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(jacocoProjects.sourceSets.main.output)
    executionData = files(jacocoProjects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        html.destination = file("${buildDir}/reports/jacoco/test/html")
        xml.destination = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}