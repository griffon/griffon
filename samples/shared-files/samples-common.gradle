/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2008-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// apply plugin: 'java-library'
// apply plugin: 'application'
// apply plugin: 'org.kordamp.gradle.integration-test'
// apply plugin: 'org.kordamp.gradle.functional-test'

dependencies {
    compileOnly project(':griffon-groovy-compile')

    api project(':griffon-guice')

    runtimeOnly config.dependencyManagement.gav('slf4j', 'slf4j-simple')

    testImplementation project(':griffon-core-test')

    functionalTestImplementation "org.hamcrest:java-hamcrest:$hamcrestVersion"
    functionalTestImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    functionalTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    functionalTestRuntimeOnly("org.junit.vintage:junit-vintage-engine:$junit5Version") {
        exclude module: 'junit', group: 'junit'
    }
    functionalTestImplementation("org.spockframework:spock-core:$spockVersion") {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    functionalTestImplementation("org.codehaus.groovy:groovy-all:$groovyVersion") {
        exclude module: 'junit', group: 'junit'
    }
}

sourceSets {
    main {
        resources {
            srcDirs = [
                'griffon-app/resources',
                'griffon-app/i18n',
                'src/main/resources'
            ]
        }
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed'
    }

    reports {
        html.enabled = true
    }
}

integrationTest {
    enabled = false
    useJUnitPlatform()

    ignoreFailures = !rootProject.fullBuild

    jacoco {
        excludes = ['sample.**']
    }
}

functionalTest {
    enabled = false
    useJUnitPlatform()

    ignoreFailures = !rootProject.fullBuild

    jacoco {
        excludes = ['sample.**']
    }
}