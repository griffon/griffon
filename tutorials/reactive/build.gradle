/*
 * Copyright 2016-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath 'org.codehaus.griffon:gradle-griffon-plugin:2.15.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.2'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    }
}

apply plugin: 'java'
apply plugin: 'org.codehaus.griffon.griffon'

griffon {
    disableDependencyResolution = false
    includeGroovyDependencies = false
    version = '2.15.1'
    toolkit = 'javafx'
}

ext {
    macosx = System.getProperty('os.name').contains('Mac OS')
}

mainClassName = 'org.example.Launcher'

apply from: 'gradle/publishing.gradle'
apply from: 'gradle/code-coverage.gradle'
apply from: 'gradle/code-quality.gradle'
apply from: 'gradle/javafx-plugin.gradle'
apply from: 'gradle/integration-test.gradle'
// apply from: 'gradle/functional-test.gradle'
apply from: 'gradle/docs.gradle'
apply plugin: 'org.kordamp.gradle.stats'
apply plugin: 'com.github.ben-manes.versions'

jfx {
    mainClass         = mainClassName
    allPermissions    = true
    keyStoreAlias     = 'example-user'
    keyStorePassword  = 'example-password'
    jfxMainAppJarName = jar.archiveName
    appName           = project.name
    vendor            = project.name
}

dependencies {
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    compileOnly "org.projectlombok:lombok:$lombokVersion"

    compile "org.codehaus.griffon:griffon-guice:${griffon.version.get()}"
    compile 'org.kordamp.bootstrapfx:bootstrapfx-core:0.2.1'
    compile 'org.kordamp.ikonli:ikonli-javafx:2.1.1'
    compile 'org.kordamp.ikonli:ikonli-typicons-pack:2.1.1'
    compile 'org.reactfx:reactfx:2.0-M5'
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-jackson:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "io.reactivex:rxjava:$rxjavaVersion"

    griffon 'org.codehaus.griffon.plugins:griffon-miglayout-plugin:1.1.1'
    runtimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"

    testCompile "org.codehaus.griffon:griffon-javafx-test:${griffon.version.get()}"
    testCompile  "org.mockito:mockito-core:$mockitoVersion"

    integrationTestCompile "org.awaitility:awaitility:$awaitilityVersion"
    integrationTestCompile "com.github.tomakehurst:wiremock:$wiremockVersion"
}

tasks.withType(JavaCompile) {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

startScripts {
    doLast {
        if (!macosx) unixScript.text = unixScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
        windowsScript.text = windowsScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
    }
}

task jacocoRootMerge(type: org.gradle.testing.jacoco.tasks.JacocoMerge, dependsOn: [test, jacocoTestReport, jacocoIntegrationTestReport]) {
    executionData = files(jacocoTestReport.executionData, jacocoIntegrationTestReport.executionData)
    destinationFile = file("${buildDir}/jacoco/root.exec")
}

task jacocoRootReport(dependsOn: jacocoRootMerge, type: JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running all tests.'
    executionData file("${buildDir}/jacoco/root.exec")
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    reports {
        csv.enabled = false
        xml.enabled = true
        html.enabled = true
        html.destination = "${buildDir}/reports/jacoco/root/html"
        xml.destination = "${buildDir}/reports/jacoco/root/root.xml"
    }
}