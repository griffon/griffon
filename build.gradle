/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2008-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply from: 'gradle/idea.gradle'

ext.javafxPlatform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
ext.platform = "${osdetector.os}-${osdetector.arch}"
boolean github = (System.env['CI'] ?: false) as boolean
ext {
    depProjects = []
    fullBuild = !github
    resourceFilePatterns = [
        '**/*.properties',
        '**/*.groovy',
        '**/*.html',
        '**/*.xml',
        '**/*.txt'
    ]
    nonCoreProjects = subprojects.findAll { !it.projectDir.absolutePath.contains('subprojects') }
    coreProjects = subprojects.findAll { it.projectDir.absolutePath.contains('subprojects') }
}

config {
    info {
        name          = 'griffon'
        vendor        = 'Griffon'
        description   = project.project_description
        inceptionYear = '2008'
        tags          = ['griffon']

        links {
            website      = 'https://griffon-framework.org'
            issueTracker = 'https://github.com/griffon/griffon/issues'
            scm          = 'https://github.com/griffon/griffon.git'
        }

        scm {
            url                 = 'https://github.com/griffon/griffon'
            connection          = 'scm:git:https://github.com/griffon/griffon.git'
            developerConnection = 'scm:git:git@github.com:griffon/griffon.git'
        }

        people {
            person {
                id    = 'shemnon'
                name  = 'Danno Ferrin'
                roles = ['Developer']
            }
            person {
                id    = 'jwill'
                name  = 'James Williams'
                roles = ['Developer']
            }
            person {
                id    = 'aklein'
                name  = 'Alexander Klein'
                roles = ['Developer']
            }
            person {
                id    = 'rgroeschke'
                name  = 'Rene Groeschke'
                roles = ['Developer']
            }
            person {
                name  = 'Dierk Koenig'
                roles = ['Contributor']
            }
            person {
                name  = 'Guillaume Laforge'
                roles = ['Contributor']
            }
            person {
                name  = 'Dean Iverson'
                roles = ['Contributor']
            }
        }
    }

    stats {
        formats = ['xml', 'txt']
        paths = [
            mvc       : [name: 'MVCGroups',     path: 'griffon-app/mvcs'],
            model     : [name: 'Models',        path: 'griffon-app/models'],
            view      : [name: 'Views',         path: 'griffon-app/views'],
            controller: [name: 'Controllers',   path: 'griffon-app/controllers'],
            service   : [name: 'Services',      path: 'griffon-app/services'],
            config    : [name: 'Configuration', path: 'griffon-app/conf'],
            lifecycle : [name: 'Lifecycle',     path: 'griffon-app/lifecycle']
        ]
    }

    docs {
        groovydoc {
            enabled = false
        }

        javadoc {
            aggregate {
                excludedProjects.addAll nonCoreProjects
            }

            exclude '**/*.html'
            exclude 'META-INF/**'
            exclude '**/*.groovy'

            autoLinks {
                enabled = false
                exclude 'griffon.*'
            }

            options {
                addBooleanOption('javafx', true)
                links 'https://www.slf4j.org/apidocs/'
                links 'https://junit.org/junit4/javadoc/latest/'
                links 'https://javax-inject.github.io/javax-inject/api/'
                links 'https://docs.oracle.com/javase/8/docs/api/'
                links 'https://docs.oracle.com/javase/8/javafx/api/'
                links 'https://google.github.io/guice/api-docs/4.1/javadoc/'
                links 'http://docs.groovy-lang.org/latest/html/api/'
                links 'http://kordamp.org/jipsy/apidocs/'
                links 'http://kordamp.org/gipsy/apidocs/'
            }
        }
    }

    artifacts {
        source {
            aggregate {
                excludedProjects.addAll nonCoreProjects
            }
        }
    }

    bom {
        enabled = false
    }

    coverage {
        jacoco {
            toolVersion = jacocoVersion
        }
    }

    dependencyManagement {
        dependency("org.kordamp.gipsy:gipsy:$jipsyVersion")
        dependency('jipsy') {
            groupId    = 'org.kordamp.jipsy'
            artifactId = 'jipsy-processor'
            version    = jipsyVersion
            modules    = ['jipsy-util']
        }
        dependency('slf4j') {
            groupId    = 'org.slf4j'
            artifactId = 'slf4j-api'
            version    = slf4jVersion
            modules    = ['slf4j-simple']
        }
        dependency("junit:junit:$junitVersion")
        dependency('junit5') {
            groupId    = 'org.junit.jupiter'
            artifactId = 'junit-jupiter-api'
            version    = junit5Version
            modules    = [
                'junit-jupiter-params',
                'junit-jupiter-engine'
            ]
        }
        dependency('junit5v') {
            groupId    = 'org.junit.vintage'
            artifactId = 'junit-vintage-engine'
            version    = junit5Version
        }
        dependency('testfx') {
            groupId    = 'org.testfx'
            artifactId = 'testfx-core'
            version    = testfxVersion
            modules    = ['testfx-junit5', 'testfx-junit']
        }
        dependency("com.google.guava:guava:$guavaVersion")
        dependency('cglib') {
            groupId    = 'cglib'
            artifactId = 'cglib'
            version    = cglibVersion
            modules    = ['cglib-nodep']
        }
    }
}

allprojects {
    repositories {
        mavenLocal()
        gradlePluginPortal()
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

subprojects { Project subproj ->
    boolean isCoreProject = subproj.projectDir.absolutePath.contains('subprojects')
    boolean isTckProject = subproj.projectDir.absolutePath.contains('tcks')
    boolean isSampleProject = subproj.projectDir.absolutePath.contains('samples')
    boolean isDocProject = subproj.projectDir.absolutePath.contains('docs')
    boolean isArchetypeProject = subproj.name.endsWith('-archetype')
    boolean isPomProject = subproj.name.endsWith('pom')
    boolean isGroovyProject = subproj.name.endsWith('-groovy')
    boolean isGradlePlugin = subproj.projectDir.absolutePath.contains('plugins')
    boolean shouldPublish = isCoreProject || isArchetypeProject || isPomProject

    config {
        info {
            name        = subproj.name
            description = subproj.project_description
            specification {
                enabled = isCoreProject || isGradlePlugin
            }
            implementation {
                enabled = isCoreProject || isGradlePlugin
            }
        }

        publishing {
            enabled = shouldPublish
        }

        artifacts {
            source {
                enabled = shouldPublish
            }

            minpom {
                enabled = isCoreProject || isSampleProject
            }
        }

        docs {
            javadoc {
                enabled = shouldPublish
            }
        }

        testing {
            enabled = isCoreProject || isSampleProject || isGradlePlugin
        }

        coverage {
            jacoco {
                enabled = isCoreProject || isSampleProject || isGradlePlugin
            }
        }

        licensing {
            enabled = isCoreProject || isGradlePlugin
        }

        stats {
            enabled = isCoreProject || isGradlePlugin || isSampleProject
        }
    }

    plugins.withType(GroovyPlugin) {
        if (isCoreProject && !isGroovyProject && !isGradlePlugin) {
            compileGroovy.enabled = false
            groovydoc.enabled = false
        }

        subproj.tasks.withType(GroovyCompile) {
            sourceCompatibility = subproj.sourceCompatibility
            targetCompatibility = subproj.targetCompatibility
        }
    }

    plugins.withType(JavaPlugin) {
        config {
            info {
                description = project.project_description
            }
        }

        subproj.tasks.withType(JavaCompile) {
            sourceCompatibility = subproj.sourceCompatibility
            targetCompatibility = subproj.targetCompatibility
        }

        dependencies {
            compileOnly config.dependencyManagement.gav('jipsy')
            annotationProcessor config.dependencyManagement.gav('jipsy')

            testImplementation config.dependencyManagement.gav('junit5', 'junit-jupiter-api')
            testImplementation config.dependencyManagement.gav('junit5', 'junit-jupiter-params')
            testRuntimeOnly config.dependencyManagement.gav('junit5', 'junit-jupiter-engine')
            testRuntimeOnly(config.dependencyManagement.gav('junit5v', 'junit-vintage-engine')) {
                exclude group: 'junit', module: 'junit'
            }
            testImplementation(config.dependencyManagement.gav('junit')) {
                exclude group: 'org.hamcrest', module: 'hamcrest-core'
            }
            testImplementation("com.google.guiceberry:guiceberry:$guiceBerryVersion") {
                exclude group: 'junit', module: 'junit'
            }
            testImplementation("name.falgout.jeffrey.testing.junit5:guice-extension:$guiceExtensionVersion") {
                transitive = false
            }
            testImplementation("com.google.inject:guice:$guiceVersion") {
                exclude group: 'org.sonatype.sisu.inject', module: 'cglib'
            }
            if (!subproj.name.endsWith('-gradle-plugin')) {
                testImplementation "org.apache.groovy:groovy-all:$groovyVersion"
                testImplementation "org.spockframework:spock-core:$spockVersion"
                testImplementation "org.mockito:mockito-core:$mockitoVersion"
            }
            testImplementation config.dependencyManagement.gav('slf4j', 'slf4j-simple')
            testImplementation config.dependencyManagement.gav('cglib', 'cglib-nodep')
        }

        processTestResources {
            filesMatching(resourceFilePatterns) {
                expand(
                    'application_name'   : project.name,
                    'application_version': project.version,
                    'griffon_version'    : project.version
                )
            }
        }

        test {
            useJUnitPlatform()

            testLogging {
                events 'skipped', 'failed'
            }

            reports {
                html.enabled = true
            }
        }

        tasks.withType(AbstractCompile) {
            if (rootProject.hasProperty('lint') && rootProject.lint.toBoolean()) {
                options.compilerArgs = [
                    '-Xlint:all', '-Xlint:deprecation', '-Xlint:unchecked'
                ]
            }
        }

        license {
            mapping {
                kt     = 'SLASHSTAR_STYLE'
                java   = 'SLASHSTAR_STYLE'
                groovy = 'SLASHSTAR_STYLE'
                gdsl   = 'SLASHSTAR_STYLE'
                dsld   = 'SLASHSTAR_STYLE'
                fxml   = 'XML_STYLE'
            }
            exclude '**/*.png'
            exclude '**/griffon/util/MethodUtils.java'
            exclude '**/griffon/util/application.groovy'
            exclude '**/griffon/util/application.xml'
            exclude '**/griffon/util/application_jdk8.groovy'
            exclude '**/griffon/util/bad_application.xml'
            exclude '**/org/jdesktop/swinghelper/debug/CheckThreadViolationRepaintManager.java'
            exclude '**/org/jdesktop/swinghelper/debug/EventDispatchThreadHangMonitor.java'
            exclude '**/org/testfx/service/support/WaitUntilSupport.java'
            exclude 'archetype-resources/**/*'
            exclude '**/archetype*.xml'
        }

        licenseTest {
            source -= sourceSets.test.resources
        }

        if (isCoreProject) {
            jar {
                manifest {
                    attributes('Automatic-Module-Name': subproj.name.replaceAll('-', '.'))
                }
            }
        }

        javadoc {
            doLast { task ->
                copy {
                    into task.destinationDir
                    from rootProject.file('src/javadoc/resources/img/griffon.ico'),
                        rootProject.file('src/javadoc/resources/css/stylesheet.css')
                }
                copy {
                    into file("${task.destinationDir}/resources")
                    from rootProject.file('src/javadoc/resources/img/')
                }
            }
        }
    }
}

project.gradle.addBuildListener(new BuildAdapter() {
    @Override
    void projectsEvaluated(Gradle gradle) {
        gradle.rootProject.subprojects.each { Project subprj ->
            subprj.plugins.withType(JavaPlugin) {
                subprj.processResources {
                    inputs.property('build_date', gradle.rootProject.config.buildInfo.buildDate + ':' + gradle.rootProject.config.buildInfo.buildTime)
                    filesMatching(subprj.rootProject.ext.resourceFilePatterns) {
                        expand(
                            'application_name': subprj.name,
                            'application_version': subprj.version,
                            'griffon_version': subprj.version,
                            'created_by': gradle.rootProject.config.buildInfo.buildCreatedBy,
                            'build_date': gradle.rootProject.config.buildInfo.buildDate,
                            'build_time': gradle.rootProject.config.buildInfo.buildTime,
                            'build_revision': gradle.rootProject.config.buildInfo.buildRevision
                        )
                    }
                }
            }
        }

        rootProject.aggregateJavadoc {
            doLast { task ->
                copy {
                    into task.destinationDir
                    from rootProject.file('src/javadoc/resources/img/griffon.ico'),
                        rootProject.file('src/javadoc/resources/css/stylesheet.css')
                }
                copy {
                    into file("${task.destinationDir}/resources")
                    from rootProject.file('src/javadoc/resources/img/')
                }
                copy {
                    into file("${task.destinationDir}/images/")
                    from rootProject.file('src/media/banners/medium.png')
                    rename '.*', 'griffon-banner-medium.png'
                }
            }
        }
    }
})
