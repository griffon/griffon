/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2008-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories {
        mavenLocal()
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.jbake:jbake-gradle-plugin:5.2.0'
        classpath 'org.ajoberstar:gradle-git-publish:2.1.3'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:5.0.3'
        classpath "org.kordamp.gradle:jdeps-gradle-plugin:0.15.0"
        classpath "org.kordamp.gradle:groovy-project-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:guide-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:plugin-gradle-plugin:$kordampPluginVersion"
        classpath "org.kordamp.gradle:kordamp-parentbuild:$kordampBuildVersion"
    }
}
apply plugin: 'org.kordamp.gradle.kordamp-parentbuild'

boolean github   = (System.env['CI'] ?: false) as boolean
boolean fullBuild = !github

rootProject.name = 'griffon'

projects {
    layout = 'explicit'

    includeProjects('subprojects')
    includeProjects('plugins')
    includeProjects('samples').includeIf(fullBuild)
    includeProjects('poms').includeIf(fullBuild)
    includeProjects('docs').includeIf(fullBuild)
    includeProjects('archetypes').includeIf(fullBuild)

    plugins {
        all {
            id 'idea'
        }
        path(':') {
            id 'org.kordamp.gradle.coveralls'
            id 'org.kordamp.gradle.java-project'
        }
        dir('subprojects') {
            id 'java-library'
            id 'groovy'
            id('org.kordamp.gradle.jdeps').includeIf({-> false && fullBuild})
        }
        dir('archetypes') {
            excludeDir('archetypes')
            id 'java-library'
        }
        dir('plugins') {
            id 'java-library'
            id 'groovy'
            id 'org.kordamp.gradle.groovy-project'
            id 'org.kordamp.gradle.plugin'
        }
        dir('samples') {
            id 'java-library'
            id 'application'
        }
        path(':sample-*') {
            id 'groovy'
            id 'org.kordamp.gradle.integration-test'
            id 'org.kordamp.gradle.functional-test'
        }
        path('*-groovy') {
            id 'groovy'
        }
    }
}

enforce {
    enabled = false
    mergeStrategy = 'override'
    rule(enforcer.rules.DependencyConvergence)
    rule(enforcer.rules.BanDuplicateClasses) { r ->
        r.enabled = false
        // r.ignoreWhenIdentical = true
        // r.findAllDuplicates = false
        // dependency("org.slf4j:slf4j-log4j12:$slf4jVersion") { d ->
        //     d.ignore('org.slf4j.impl.*')
        // }
    }
    rule(enforcer.rules.ForceDependencies) { r ->
        r.dependencies.addAll "com.google.guava:guava:$guavaVersion",
            "junit:junit:$junitVersion",
            "cglib:cglib-nodep:$cglibVersion",
            "org.asciidoctor:asciidoctorj:$asciidoctorjVersion",
            "org.codehau.groovy:groovy:$groovyVersion",
            "org.codehaus.groovy:groovy:$groovyVersion",
            "org.codehaus.groovy:groovy-json:$groovyVersion",
            "org.codehaus.groovy:groovy-macro:$groovyVersion",
            "org.codehaus.groovy:groovy-nio:$groovyVersion",
            "org.codehaus.groovy:groovy-sql:$groovyVersion",
            "org.codehaus.groovy:groovy-templates:$groovyVersion",
            "org.codehaus.groovy:groovy-test:$groovyVersion",
            "org.codehaus.groovy:groovy-xml:$groovyVersion",
            "org.slf4j:slf4j-api:$slf4jVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "com.google.code.findbugs:jsr305:$jsr305Version",
            "commons-io:commons-io:$commonsIoVersion",
            "org.apache.commons:commons-lang3:$commonsLang3Version",
            "org.ow2.asm:asm:$asmVersion",
            "org.ow2.asm:asm-commons:$asmVersion",
            "org.ow2.asm:asm-tree:$asmVersion",
            "org.objenesis:objenesis:$objenesisVersion",
            "net.bytebuddy:byte-buddy:$bytebuddyVersion",
            "net.bytebuddy:byte-buddy-agent:$bytebuddyVersion",
            "org.junit.jupiter:junit-jupiter-engine:$junit5Version",
            "org.junit.platform:junit-platform-engine:$junitPlatformVersion",
            "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    }
}
