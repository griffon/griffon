/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2008-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.intellij.openapi.diagnostic.*
import com.intellij.patterns.*

/**
 * @author Kasper Fock
 * @author David Askirk
 * @author Peter Gromov
 * @author Andres Almiray
 */

String artifactProviderForType = 'org.kordamp.jipsy.ServiceProviderFor'

contributor(scope: annotatedScope(ctype: artifactProviderForType)) {
    def clazz = enclosingClass()
    if (clazz) {
        String value = clazz.getAnnotation(artifactProviderForType).findAttributeValue('value').text
        String targetType = 'griffon.core.artifact.' + value
        try {
            delegatesTo(findClass(targetType))
        } catch (x) {
            // skip
        }
    }
}

contributor(scope: annotatedScope(ctype: 'griffon.transform.EventPublisher')) {
    delegatesTo(findClass('griffon.core.event.EventPublisher'))
}

contributor(scope: annotatedScope(ctype: 'griffon.transform.MVCAware')) {
    delegatesTo(findClass('griffon.core.mvc.MVCHandler'))
}

contributor(scope: annotatedScope(ctype: 'javax.application.threading.ThreadingAware')) {
    delegatesTo(findClass('griffon.core.threading.ThreadingHandler'))
}

contributor(scope: annotatedScope(ctype: 'griffon.transform.ResourcesAware')) {
    delegatesTo(findClass('griffon.core.resources.ResourceHandler'))
}

contributor(scope: annotatedScope(ctype: 'griffon.transform.MessageSourceAware')) {
    delegatesTo(findClass('griffon.core.i18n.MessageSource'))
}

contributor(scope: annotatedScope(ctype: 'griffon.transform.ResourceResolverAware')) {
    delegatesTo(findClass('griffon.core.resources.ResourceResolver'))
}

contributor(scope: annotatedScope(ctype: 'griffon.transform.Observable')) {
    delegatesTo(findClass('griffon.beans.Observable'))
}

contributor(scope: annotatedScope(ctype: 'griffon.transform.Vetoable')) {
    delegatesTo(findClass('griffon.beans.Vetoable'))
}
