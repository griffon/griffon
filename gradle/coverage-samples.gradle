/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2008-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'jacoco'

jacoco {
    toolVersion = jacocoVersion
}

test {
    jacoco {
        excludes = ['sample.**']
    }
}

jacocoTestReport {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    List _classDirectories = []
    Set _sourceDirectories = [] as Set
    project.depProjects.each { String projectName ->
        _classDirectories.addAll project(projectName).sourceSets.main.output.classesDirs*.path
        _sourceDirectories << project(projectName).sourceSets.main.allSource.srcDirs
    }

    additionalSourceDirs.from project.files(_sourceDirectories)
    sourceDirectories.from project.files(_sourceDirectories)
    classDirectories.from project.files(_classDirectories)

    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }

    afterEvaluate {
        classDirectories.from files(classDirectories.files.collect { d ->
            fileTree(dir: d, exclude: 'sample/**')
        })
    }
}

afterEvaluate {
    if (hasIntegrationTests) {
        jacocoIntegrationTestReport {
            List _classDirectories = []
            Set _sourceDirectories = [] as Set
            project.depProjects.each { String projectName ->
                _classDirectories.addAll project(projectName).sourceSets.main.output.classesDirs*.path
                _sourceDirectories << project(projectName).sourceSets.main.allSource.srcDirs
            }

            additionalSourceDirs.from project.files(_sourceDirectories)
            sourceDirectories.from project.files(_sourceDirectories)
            classDirectories.from project.files(_classDirectories)

            afterEvaluate {
                classDirectories.from files(classDirectories.files.collect { d ->
                    fileTree(dir: d, exclude: 'sample/**')
                })
            }
        }
    }

    if (hasFunctionalTests) {
        jacocoFunctionalTestReport {
            List _classDirectories = []
            Set _sourceDirectories = [] as Set
            project.depProjects.each { String projectName ->
                _classDirectories.addAll project(projectName).sourceSets.main.output.classesDirs*.path
                _sourceDirectories << project(projectName).sourceSets.main.allSource.srcDirs
            }

            additionalSourceDirs.from project.files(_sourceDirectories)
            sourceDirectories.from project.files(_sourceDirectories)
            classDirectories.from project.files(_classDirectories)

            afterEvaluate {
                classDirectories.from files(classDirectories.files.collect { d ->
                    fileTree(dir: d, exclude: 'sample/**')
                })
            }
        }
    }
}